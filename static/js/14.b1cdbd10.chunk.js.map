{"version":3,"sources":["components/TestSpeed.tsx","components/services/Firebase.tsx","components/subComponents/Html.tsx","components/Navs/LoggedNav.tsx","components/subComponents/NotLogged.tsx"],"names":["Battle","React","memo","props","HEADER","randomWords","require","axios","category","match","params","userStatus","useContext","UserContext","user","setUser","userData","setUserData","useState","countdown","setCountdown","timer","setTimer","userInput","setUserInput","symbols","setSymbols","wrongSymbols","setWrongSymbols","allSymbols","setAllSymbols","seconds","setSeconds","started","setStarted","finished","setFinished","wpm","setWpm","cpm","setCpm","displayPoints","setDisplayPoints","resultStatus","setResultStatus","randomTip","setRandomTip","quote","setQuote","tips","quoteData","setQuoteData","customText","setCustomText","customError","setCustomError","randomPoints","min","max","Math","floor","random","useEffect","Firebase","auth","onAuthStateChanged","usr","mustLogged","document","querySelector","db","collection","doc","uid","onSnapshot","includeMetadataChanges","data","exactly","join","get","then","res","content","catch","err","console","log","style","display","id","current","setInterval","s","useRef","idTimer","idSeconds","clearInterval","test","input","opacity","filter","removeAttribute","focus","time","clear","finishedRace","givenPoints","date","Date","h","getHours","getMinutes","y","getFullYear","m","getMonth","d","getDate","result","speedSection","blur","setAttribute","testOver","value","v","text","split","i","length","correctSymbols","round","checkWrongSymbols","update","points","randomTests","races","lastWPM","bestWPM","randomHistory","quotesTests","quotesHistory","customTests","customHistory","title","className","path","name","onChange","e","target","maxLength","minLength","onClick","textarea","btn","setTimeout","map","word","index","color","fontWeight","textDecoration","onPaste","preventDefault","onCopy","disabled","type","autoComplete","placeholder","displayName","rank","to","window","location","reload","author","marginTop","href","fire","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Html","LoggedNav","notifications","setNotifications","isMounted","history","useHistory","mobileStatus","handleSignOut","signOut","push","notStatus","mobileNav","effect","zIndex","src","photoURL","alt","wrapper","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","x","sender","message","play","NotLogged"],"mappings":"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","file":"static/js/14.b1cdbd10.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport NotLogged from \"./subComponents/NotLogged\";\r\nimport \"../style/css/main.css\";\r\nimport Nav from \"./Navs/LoggedNav\";\r\nimport Firebase, { db } from \"./services/Firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport HTML from \"./subComponents/Html\";\r\nimport UserContext from \"./services/UserContext\";\r\nconst Battle = React.memo((props: any) => {\r\n  const randomWords = require(\"random-words\");\r\n  const axios = require(\"axios\");\r\n\r\n  const category = props.match.params.category;\r\n  let HEADER;\r\n\r\n  if (category === \"random\") {\r\n    HEADER = \"Random\"; // 20-40\r\n  } else if (category === \"quotes\") {\r\n    HEADER = \"Quotes\"; // 60-80\r\n  } else if (category === \"custom\") {\r\n    HEADER = \"Custom\"; // 20-40\r\n  } else {\r\n    HEADER = category;\r\n  }\r\n\r\n  const userStatus = useContext(UserContext);\r\n  const { user, setUser, userData, setUserData } = userStatus;\r\n\r\n  const [countdown, setCountdown] = useState<number>(5);\r\n  const [timer, setTimer] = useState<number>(60);\r\n  const [userInput, setUserInput] = useState<string>(\"\");\r\n\r\n  const [symbols, setSymbols] = useState<number>(0);\r\n  const [wrongSymbols, setWrongSymbols] = useState<number>(0);\r\n  const [allSymbols, setAllSymbols] = useState<number>(0);\r\n  const [seconds, setSeconds] = useState<number>(1);\r\n\r\n  const [started, setStarted] = useState<boolean>(false);\r\n  const [finished, setFinished] = useState<boolean>(false);\r\n  const [wpm, setWpm] = useState<number>(0);\r\n  const [cpm, setCpm] = useState<number>(0);\r\n  const [displayPoints, setDisplayPoints] = useState(0);\r\n  const [resultStatus, setResultStatus] = useState<string>(\r\n    \"Race finished, below you have your statistics.\"\r\n  );\r\n  const [randomTip, setRandomTip] = useState<string>(\"\");\r\n\r\n  const [quote, setQuote] = useState<string>(\"Loading...\");\r\n\r\n  const tips = [\r\n    \"You can use CTRL + Backspace (Win) to delete a whole word.\",\r\n    \"Try to type without looking at the keyboard, look at your screen, you will type faster!\",\r\n    \"Use your at least 7 fingers when you type, you will type faster.\",\r\n    \"Is better to type correctly and a bit slower than wrong and faster.\",\r\n    \"If you have to type an uppercase letter use SHIFT + key instead of CapsLock.\",\r\n    \"Maintain a good and a comfortable position of your body.\",\r\n    \"Place your hands on the home row of the keyboard, hand placement is important.\",\r\n    \"Stretch your hands, shoulders, your neck and don't be tired, you will type easier.\",\r\n    \"Scan the text in advance with one or two words.\",\r\n  ];\r\n\r\n  const [quoteData, setQuoteData] = useState<any>({});\r\n\r\n  const [customText, setCustomText] = useState(\"\");\r\n  const [customError, setCustomError] = useState(\"\");\r\n\r\n  function randomPoints(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setRandomTip(tips[Math.floor(Math.random() * 9)]);\r\n\r\n    Firebase.auth().onAuthStateChanged((usr: any) => {\r\n      let mustLogged = document.querySelector(\".notLoggedIn\") as HTMLDivElement;\r\n\r\n      if (usr) {\r\n        setUser(usr);\r\n\r\n        db.collection(\"users\")\r\n          .doc(usr.uid)\r\n          .onSnapshot(\r\n            {\r\n              includeMetadataChanges: true,\r\n            },\r\n            (doc: any) => {\r\n              setUserData(doc.data());\r\n            }\r\n          );\r\n\r\n        if (category === \"random\") {\r\n          setQuote(randomWords({ exactly: randomPoints(20, 25), join: \" \" }));\r\n        }\r\n\r\n        if (category === \"quotes\") {\r\n          axios\r\n            .get(\"https://api.quotable.io/random\")\r\n            .then((res: any) => {\r\n              setQuote(res.data.content);\r\n              setQuoteData(res.data);\r\n            })\r\n            .catch((err: any) => {\r\n              console.log(\"An error has occured: \", err);\r\n            });\r\n        }\r\n\r\n        if (!started) {\r\n          if (category === \"custom\" && quote === \"Loading...\") {\r\n            setQuote(\"Waiting for text\");\r\n            let countdown = document.querySelector(\r\n              \".countdown\"\r\n            ) as HTMLHeadingElement;\r\n            countdown.style.display = \"none\";\r\n            setCountdown(5);\r\n          } else {\r\n            id.current = setInterval(() => {\r\n              setCountdown((s) => s - 1);\r\n            }, 1000);\r\n          }\r\n        }\r\n      } else {\r\n        if (mustLogged) {\r\n          mustLogged.style.display = \"block\";\r\n        }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // start the test\r\n  const id = React.useRef<any>();\r\n  const idTimer = React.useRef<any>();\r\n  const idSeconds = React.useRef<any>();\r\n\r\n  const clear = () => {\r\n    clearInterval(id.current);\r\n\r\n    if (quote !== \"Loading...\") {\r\n      let test = document.querySelector(\".testWrapper\") as HTMLDivElement;\r\n      let input = document.querySelector(\"#text\") as HTMLInputElement;\r\n      let countdown = document.querySelector(\".countdown\")! as HTMLHeadElement;\r\n\r\n      if (test) {\r\n        test.style.opacity = \"1\";\r\n        test.style.filter = \"blur(0px)\";\r\n      }\r\n      if (input) {\r\n        input.removeAttribute(\"disabled\");\r\n        input.focus();\r\n      }\r\n\r\n      if (countdown) {\r\n        countdown.style.display = \"none\";\r\n      }\r\n\r\n      idTimer.current = setInterval(() => {\r\n        setTimer((time) => time - 1);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    idSeconds.current = setInterval(() => {\r\n      setSeconds((s) => s + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countdown === 0) {\r\n      clear();\r\n    }\r\n  }, [countdown]);\r\n\r\n  useEffect(() => {\r\n    if (timer === 0) {\r\n      // test finished.\r\n      finishedRace();\r\n      setResultStatus(\"Time's up, below you have your statistics\");\r\n    }\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    if (started) {\r\n      startTimer();\r\n    }\r\n  }, [started]);\r\n\r\n  let givenPoints = 0;\r\n  let date = new Date();\r\n  let h = date.getHours();\r\n  let min = date.getMinutes();\r\n  let y = date.getFullYear();\r\n  let m = date.getMonth() + 1;\r\n  let d = date.getDate();\r\n\r\n  const categoryRandom = () => {\r\n    wpm <= 30 ? (givenPoints = 5) : (givenPoints = randomPoints(20, 40));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        randomTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.randomTests + 1\r\n            : userData.randomTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        randomHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.randomHistory,\r\n                { wpm: wpm, time: `${h}:${min} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.randomHistory,\r\n      });\r\n  };\r\n\r\n  const categoryQuotes = () => {\r\n    wpm <= 50 ? (givenPoints = 5) : (givenPoints = randomPoints(50, 80));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        quotesTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.quotesTests + 1\r\n            : userData.quotesTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        quotesHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.quotesHistory,\r\n                { wpm: wpm, time: `${h}:${min} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.quotesHistory,\r\n      });\r\n  };\r\n\r\n  const categoryCustom = () => {\r\n    wpm <= 30 ? (givenPoints = 5) : (givenPoints = randomPoints(20, 40));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        customTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.customTests + 1\r\n            : userData.customTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        customHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.customHistory,\r\n                { wpm: wpm, time: `${h}:${min} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.customHistory,\r\n      });\r\n  };\r\n\r\n  const finishedRace = () => {\r\n    setFinished(true);\r\n\r\n    clearInterval(idSeconds.current);\r\n    clearInterval(idTimer.current);\r\n\r\n    let result = document.querySelector(\".result\") as HTMLDivElement;\r\n    let speedSection = document.querySelector(\r\n      \".neededWrapper\"\r\n    ) as HTMLDivElement;\r\n    let input = document.querySelector(\"#text\") as HTMLInputElement;\r\n\r\n    if (input) {\r\n      input.blur();\r\n      input.setAttribute(\"disabled\", \"\");\r\n      input.setAttribute(\"readonly\", \"\");\r\n      input.setAttribute(\"maxlength\", \"0\");\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n    if (result && speedSection) {\r\n      result.style.display = \"block\";\r\n      speedSection.style.opacity = \"0.5\";\r\n      speedSection.style.filter = \"blur(2px)\";\r\n    }\r\n\r\n    let testOver = document.querySelector(\".testOver\") as HTMLDivElement;\r\n    if (testOver) {\r\n      testOver.style.display = \"block\";\r\n    }\r\n  };\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!finished) {\r\n      setUserInput(e.target.value);\r\n      setAllSymbols((s) => s + 1);\r\n      setStarted(true);\r\n    }\r\n  };\r\n\r\n  const correctSymbols = (v: string) => {\r\n    const text = quote;\r\n    return v.split(\"\").filter((s: string, i: number) => s === text[i]).length;\r\n  };\r\n\r\n  const checkWrongSymbols = (v: string) => {\r\n    const text = quote;\r\n    return v.split(\"\").filter((s: string, i: number) => s !== text[i]).length;\r\n  };\r\n\r\n  let CORRECT_COLOR: string = \"#7e41da\";\r\n  let WRONG_COLOR: string = \"red\";\r\n\r\n  const isFinished = (value: string) => {\r\n    if (!finished) {\r\n      if (value.length === quote.length) {\r\n        finishedRace();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSymbols(correctSymbols(userInput));\r\n    setWpm(Math.round(symbols / 5 / (seconds / 60)));\r\n    setCpm(Math.round((symbols / seconds) * 60));\r\n\r\n    setWrongSymbols(checkWrongSymbols(userInput));\r\n    isFinished(userInput);\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    if (finished) {\r\n      if (category === \"random\") {\r\n        categoryRandom();\r\n      } else if (category === \"quotes\") {\r\n        categoryQuotes();\r\n      } else if (category === \"custom\") {\r\n        categoryCustom();\r\n      }\r\n    }\r\n  }, [wpm, finished]);\r\n\r\n  const handleCustomText = () => {\r\n    let content = document.querySelector(\".customText\") as HTMLDivElement;\r\n    let textarea = document.querySelector(\"#custom\") as HTMLTextAreaElement;\r\n    let btn = document.querySelector(\"#btn\") as HTMLButtonElement;\r\n    let countdown = document.querySelector(\".countdown\") as HTMLHeadingElement;\r\n\r\n    const regEx = /^[a-zA-Z0-9\\.\\,\\;\\?\\'\\\"\\(\\)\\!\\$\\-\\& \\s]*$/;\r\n\r\n    if (customText.length >= 100 && customText.length <= 250) {\r\n      if (regEx.test(customText)) {\r\n        setQuote(customText);\r\n        btn.setAttribute(\"disabled\", \"\");\r\n        textarea.setAttribute(\"readonly\", \"\");\r\n        countdown.style.display = \"block\";\r\n        content.style.display = \"none\";\r\n        setTimeout(() => {\r\n          id.current = setInterval(() => {\r\n            setCountdown((s) => s - 1);\r\n          }, 1000);\r\n        }, 500);\r\n      } else {\r\n        setCustomError(\r\n          \"You can only use lowercase, uppercase letters, numbers, punctuation and some symbols such as: () ? ! - $ & \"\r\n        );\r\n      }\r\n    } else {\r\n      setCustomError(\r\n        \"The text length must be at least 100 characters and max 250 characters.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const newTest = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HTML title=\"JustType - Test your speed\" />\r\n\r\n      {category === \"random\" ||\r\n      category === \"quotes\" ||\r\n      category === \"custom\" ? (\r\n        <>\r\n          {user ? (\r\n            <div className=\"battleExtraWrapper\">\r\n              <Nav path=\"/play\" name=\"Main\" />\r\n              <div className=\"battleWrapper\">\r\n                {category === \"custom\" ? (\r\n                  <div className=\"customText\">\r\n                    <p>\r\n                      Enter your text below, make sure you follow the rules of\r\n                      characters; min = 100, max = 250.\r\n                    </p>\r\n                    <textarea\r\n                      onChange={(e) => {\r\n                        setCustomText(e.target.value);\r\n                        setCustomError(\"\");\r\n                      }}\r\n                      maxLength={250}\r\n                      minLength={150}\r\n                      id=\"custom\"\r\n                    ></textarea>\r\n                    <button id=\"btn\" onClick={handleCustomText}>\r\n                      Go\r\n                    </button>\r\n                    <p className=\"lengthText\">{customText.length}/250</p>\r\n                    <p>{customError}</p>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <h1 className=\"countdown\">{countdown}</h1>\r\n\r\n                <div className=\"testWrapper\">\r\n                  <div className=\"neededWrapper\">\r\n                    <div className=\"quote\">\r\n                      {quote.split(\"\").map((word, index) => {\r\n                        let color;\r\n                        if (index < userInput.length) {\r\n                          color =\r\n                            word === userInput[index]\r\n                              ? CORRECT_COLOR\r\n                              : WRONG_COLOR;\r\n\r\n                          if (word === \" \") {\r\n                            if (userInput[index] !== word) {\r\n                              word = userInput[index];\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        if (index === userInput.length) {\r\n                          return (\r\n                            <span\r\n                              key={index}\r\n                              className={\"word\"}\r\n                              style={{\r\n                                color: color,\r\n                                fontWeight: 700,\r\n                                textDecoration: \"underline\",\r\n                              }}\r\n                            >\r\n                              {word === \" \" ? \" \" : word}\r\n                            </span>\r\n                          );\r\n                        }\r\n\r\n                        return (\r\n                          <span\r\n                            key={index}\r\n                            className={\"word\"}\r\n                            style={{ color: color }}\r\n                          >\r\n                            {word === \" \" ? \" \" : word}\r\n                          </span> // is weird isn't it? is not a normal space is &nbsp; using alt + 2 2 5\r\n                        );\r\n                      })}\r\n                    </div>\r\n\r\n                    <input\r\n                      onPaste={(e) => e.preventDefault()}\r\n                      onCopy={(e) => e.preventDefault()}\r\n                      id=\"text\"\r\n                      maxLength={quote.length}\r\n                      onChange={handleInput}\r\n                      disabled\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      placeholder={\"Start typing the text above\"}\r\n                    />\r\n\r\n                    <div className=\"leftInfo\">\r\n                      <p className=\"category\">Category: {HEADER}</p>\r\n                      <p className=\"features\">\r\n                        {category == \"random\" && \"Random words\"}\r\n                        {category == \"quotes\" &&\r\n                          \"Lowercase, uppercase words, punctuation\"}\r\n                        {category == \"custom\" &&\r\n                          \"Allowed lowercase, uppercase words, punctuation, symbols\"}\r\n                      </p>\r\n                      <p className=\"account\">\r\n                        Account: {user ? user.displayName : \"Loading...\"},{\" \"}\r\n                        {userData ? userData.points : \"Loading\"} Points,{\" \"}\r\n                        {userData ? userData.rank : \"Loading...\"}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"rightInfo\">\r\n                      <p className=\"timeleft\">{timer}</p>\r\n                      <p className=\"abandon\">\r\n                        <Link to=\"/play\">Abandon</Link>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <p className=\"randomTip\">Random Tip: {randomTip}</p>\r\n\r\n                  <div className=\"testOver\">\r\n                    <p>This test is over.</p>\r\n                    <div className=\"testOverButtons\">\r\n                      <button onClick={newTest}>New test on {HEADER}</button>\r\n\r\n                      <Link to=\"/play\">\r\n                        <button>Go home</button>\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"result\">\r\n                    <h1>{resultStatus}</h1>\r\n                    <p className=\"givenPoints\">\r\n                      <span>+{displayPoints}</span> points. Total points:{\" \"}\r\n                      <span>\r\n                        {userData ? userData.points : \"Calculating..\"}\r\n                      </span>\r\n                    </p>\r\n                    <p className=\"infoResult\">\r\n                      {displayPoints === 5\r\n                        ? `You have to get over \r\n                          ${category === \"random\" ? \"30\" : \"\"}\r\n                          ${category === \"quotes\" ? \"50\" : \"\"}\r\n                          ${category === \"custom\" ? \"30\" : \"\"}\r\n                                                            \r\n                          WPM for this category to get the normal amount of points.`\r\n                        : null}\r\n                    </p>\r\n                    <p className=\"notAllowed\">\r\n                      {Math.round((symbols / allSymbols) * 100) < 70\r\n                        ? \"You have an accuracy that is less than 70%, your score will not be saved.\"\r\n                        : \"\"}\r\n                    </p>\r\n                    <p>\r\n                      Category of the test: <span>{HEADER}</span>\r\n                    </p>\r\n                    <p>\r\n                      WPM (Words Per Minute): <span>{!wpm ? \"0\" : wpm}</span>\r\n                    </p>\r\n                    <p>\r\n                      CPM (Characters Per Minute):{\" \"}\r\n                      <span>{!cpm ? \"0\" : cpm}</span>\r\n                    </p>\r\n                    <p>\r\n                      Text typed in: <span>{seconds} seconds</span>\r\n                    </p>\r\n                    <p>\r\n                      Time left: <span>{timer} seconds</span>\r\n                    </p>\r\n                    <p>\r\n                      Correct symbols: <span>{symbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Wrong symbols on text: <span>{wrongSymbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Accuracy:{\" \"}\r\n                      <span>\r\n                        {!Math.round((symbols / allSymbols) * 100)\r\n                          ? \"0\"\r\n                          : Math.round((symbols / allSymbols) * 100)}\r\n                        %\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Total keystrokes: <span>{allSymbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Text length: <span>{quote.length}</span> characters\r\n                      (including spaces)\r\n                    </p>\r\n                    <p>\r\n                      Unnecessary keystrokes:{\" \"}\r\n                      <span>\r\n                        {allSymbols > quote.length\r\n                          ? allSymbols - quote.length\r\n                          : \"0\"}\r\n                      </span>\r\n                    </p>\r\n                    {category === \"quotes\" ? (\r\n                      <p>\r\n                        A quote from: <span>{quoteData.author}</span>\r\n                      </p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p style={{ marginTop: \"20px\" }}>\r\n                      <Link to=\"/info\">How we do it & Good to know</Link>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <NotLogged />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p className=\"categoryNotExist\">\r\n          This category ({category}) does not exist, sorry!{\" \"}\r\n          <a href=\"/play\">Play</a>\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Battle;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBPuJnN5gI3o_YZeVNlZwOky-7Y6LDGrTI\",\r\n  authDomain: \"justtype-preview.firebaseapp.com\",\r\n  projectId: \"justtype-preview\",\r\n  storageBucket: \"justtype-preview.appspot.com\",\r\n  messagingSenderId: \"648878251377\",\r\n  appId: \"1:648878251377:web:e42775dc14919b1475ead0\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nexport const db = firebase.firestore();\r\n\r\nexport default fire;\r\n","import Helmet from \"react-helmet\";\r\n\r\nfunction Html(props:any) {\r\n    return (\r\n        <Helmet>\r\n                <title>{props.title}</title>\r\n                <style>\r\n                {`\r\n                 body {\r\n                    background-color: #0e0b11;       \r\n                  }\r\n                `}\r\n                </style>\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default Html\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"../../style/css/main.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Firebase, { db } from \"../services/Firebase\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport UserContext from \"../services/UserContext\";\r\n\r\nfunction LoggedNav(props: any) {\r\n  // states\r\n  const [notifications, setNotifications] = useState<any>(\"\");\r\n\r\n  const userStatus = useContext(UserContext);\r\n  const { user, setUser } = userStatus;\r\n\r\n  // ui stuff & checking if the user is logged in\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    Firebase.auth().onAuthStateChanged((usr: any) => {\r\n      if (usr) {\r\n        if (isMounted) {\r\n          setUser(usr);\r\n        }\r\n      }\r\n    });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // fixing a bug\r\n    if (user) {\r\n      db.collection(\"users\")\r\n        .doc(user?.uid)\r\n        .onSnapshot(\r\n          {\r\n            includeMetadataChanges: true,\r\n          },\r\n          (doc: any) => {\r\n            if (isMounted) {\r\n              setNotifications(doc.data().notifications);\r\n            }\r\n          }\r\n        );\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [user]);\r\n\r\n  const history = useHistory();\r\n\r\n  let mobileStatus = false;\r\n\r\n  const handleMobile = () => {\r\n    mobileStatus = !mobileStatus;\r\n\r\n    let mobileNav = document.querySelector(\r\n      \".mobileNavLogged\"\r\n    ) as HTMLDivElement;\r\n    let effect = document.querySelector(\".effectLogged\") as HTMLDivElement;\r\n\r\n    if (mobileStatus) {\r\n      mobileNav.style.display = \"block\";\r\n      effect.style.opacity = \"0.5\";\r\n      effect.style.zIndex = \"999\";\r\n    } else {\r\n      mobileNav.style.display = \"none\";\r\n      effect.style.opacity = \"0\";\r\n      effect.style.zIndex = \"-2\";\r\n    }\r\n  };\r\n\r\n  const handleRemoveMobile = () => {\r\n    mobileStatus = false;\r\n\r\n    let mobileNav = document.querySelector(\r\n      \".mobileNavLogged\"\r\n    ) as HTMLDivElement;\r\n    let effect = document.querySelector(\".effectLogged\") as HTMLDivElement;\r\n\r\n    mobileNav.style.display = \"none\";\r\n    effect.style.opacity = \"0\";\r\n    effect.style.zIndex = \"-2\";\r\n  };\r\n\r\n  const handleSignOut = () => {\r\n    Firebase.auth().signOut();\r\n    history.push(\"/sign-in\");\r\n  };\r\n\r\n  let notStatus = false;\r\n\r\n  const handleNotifications = () => {\r\n    notStatus = !notStatus;\r\n    let wrapper = document.querySelector(\r\n      \".notificationsWrapper\"\r\n    ) as HTMLDivElement;\r\n\r\n    if (notStatus) {\r\n      wrapper.style.zIndex = \"900\";\r\n      wrapper.style.opacity = \"1\";\r\n    } else {\r\n      wrapper.style.zIndex = \"-100\";\r\n      wrapper.style.opacity = \"0\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"effectLogged\" onClick={handleRemoveMobile}></div>\r\n\r\n      <div className=\"navbarLogged\">\r\n        <h1 className=\"logoNavLogged\">\r\n          <HashLink to=\"/\">\r\n            JustTyp<span></span>\r\n          </HashLink>\r\n        </h1>\r\n\r\n        <div className=\"navContent\">\r\n          <ul>\r\n            <Link to={props.path}>\r\n              <li>{props.name}</li>\r\n            </Link>\r\n          </ul>\r\n\r\n          <Link to=\"/profile\">\r\n            <img\r\n              src={\r\n                user\r\n                  ? user.photoURL\r\n                  : \"https://firebasestorage.googleapis.com/v0/b/justtype-preview.appspot.com/o/profileimage.jpg?alt=media&token=ff56cecc-ffce-42c5-8079-bcc806e70348\"\r\n              }\r\n              className=\"profileImageMobile\"\r\n              alt=\"\"\r\n            />\r\n          </Link>\r\n\r\n          <div className=\"notifications\">\r\n            <div className=\"notificationBox\" onClick={handleNotifications}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"44\"\r\n                height=\"44\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"#6f32be\"\r\n                fill=\"none\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                <path d=\"M10 5a2 2 0 0 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6\" />\r\n                <path d=\"M9 17v1a3 3 0 0 0 6 0v-1\" />\r\n              </svg>\r\n            </div>\r\n\r\n            <div className=\"notificationsWrapper\">\r\n              <h1>Notifications</h1>\r\n              {notifications ? (\r\n                notifications.map((x: any) => {\r\n                  return (\r\n                    <div className=\"notification\" key={x.id}>\r\n                      <p className=\"sender\">\r\n                        <span>from</span> {x.sender}\r\n                      </p>\r\n                      <p className=\"notificationMessage\">\r\n                        {x.message} <span> - {x.time}</span>\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className=\"notificationSpinner\"></div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <button className=\"navButtonLogged\" onClick={handleSignOut}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"44\"\r\n              height=\"44\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#6f32be\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n              <path d=\"M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2\" />\r\n              <path d=\"M20 12h-13l3 -3m0 6l-3 -3\" />\r\n            </svg>\r\n            <p>Sign Out</p>\r\n          </button>\r\n\r\n          <div className=\"hamburgerLogged\" onClick={handleMobile}>\r\n            <div className=\"lineLogged  line1\"> </div>\r\n            <div className=\"lineLogged line2\"> </div>\r\n            <div className=\"lineLogged  line3\"> </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mobileNavLogged\">\r\n        <h1 className=\"logoNavMobileLogged\">\r\n          <HashLink to=\"/\">\r\n            JustTyp<span></span>\r\n          </HashLink>\r\n        </h1>\r\n\r\n        <div className=\"navContentMobile\">\r\n          <ul>\r\n            {props.play ? (\r\n              <a href={props.path}>{props.name}</a>\r\n            ) : (\r\n              <Link to={props.path}>\r\n                <li>{props.name}</li>\r\n              </Link>\r\n            )}\r\n          </ul>\r\n\r\n          <Link to=\"/profile\">\r\n            <img\r\n              src={\r\n                user\r\n                  ? user.photoURL\r\n                  : \"https://firebasestorage.googleapis.com/v0/b/justtype-preview.appspot.com/o/profileimage.jpg?alt=media&token=ff56cecc-ffce-42c5-8079-bcc806e70348\"\r\n              }\r\n              className=\"profileImageMobile\"\r\n              alt=\"\"\r\n            />\r\n          </Link>\r\n\r\n          <button className=\"navButtonMobileLogged\" onClick={handleSignOut}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"44\"\r\n              height=\"44\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#6f32be\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n              <path d=\"M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2\" />\r\n              <path d=\"M20 12h-13l3 -3m0 6l-3 -3\" />\r\n            </svg>\r\n            <p>Sign Out</p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoggedNav;\r\n","import React from \"react\";\r\nimport \"../../style/css/main.css\";\r\nimport { Link } from \"react-router-dom\";\r\nconst NotLogged = () => {\r\n  return (\r\n    <div className=\"notLoggedIn\">\r\n      <p>You must be logged in to view this page</p>\r\n      <Link to=\"/sign-in\">\r\n        <button>Sign In</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotLogged;\r\n"],"sourceRoot":""}