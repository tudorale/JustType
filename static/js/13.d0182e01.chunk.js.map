{"version":3,"sources":["components/TestSpeed.tsx","components/services/Firebase.tsx","components/subComponents/Html.tsx","components/Navs/LoggedNav.tsx","components/subComponents/NotLogged.tsx"],"names":["Battle","React","memo","props","HEADER","randomWords","require","axios","category","match","params","useState","user","setUser","userData","setUserData","countdown","setCountdown","timer","setTimer","userInput","setUserInput","symbols","setSymbols","wrongSymbols","setWrongSymbols","allSymbols","setAllSymbols","seconds","setSeconds","started","setStarted","finished","setFinished","wpm","setWpm","cpm","setCpm","displayPoints","setDisplayPoints","resultStatus","setResultStatus","randomTip","setRandomTip","quote","setQuote","tips","quoteData","setQuoteData","customText","setCustomText","customError","setCustomError","randomPoints","min","max","Math","floor","random","useEffect","Firebase","auth","onAuthStateChanged","usr","spinner","document","querySelector","mustLogged","db","collection","doc","uid","onSnapshot","includeMetadataChanges","data","exactly","join","get","then","res","content","catch","err","console","log","style","display","id","current","setInterval","s","useRef","idTimer","idSeconds","clearInterval","test","input","opacity","filter","removeAttribute","focus","time","clear","finishedRace","givenPoints","date","Date","h","getHours","getMinutes","getSeconds","y","getFullYear","m","getMonth","d","getDate","result","speedSection","blur","setAttribute","testOver","value","v","text","split","i","length","correctSymbols","round","checkWrongSymbols","update","points","randomTests","races","lastWPM","bestWPM","randomHistory","quotesTests","quotesHistory","customTests","customHistory","title","className","path","name","onChange","e","target","maxLength","minLength","onClick","textarea","btn","setTimeout","map","word","index","color","fontWeight","textDecoration","onPaste","preventDefault","onCopy","disabled","type","autoComplete","placeholder","displayName","rank","to","href","author","marginTop","fire","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Html","LoggedNav","notifications","setNotifications","isMounted","history","useHistory","mobileStatus","handleSignOut","signOut","push","notStatus","mobileNav","effect","zIndex","src","photoURL","wrapper","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","x","sender","message","play","NotLogged"],"mappings":"yMAQMA,EAASC,IAAMC,MAAK,SAACC,GACzB,IAIIC,EAJEC,EAAcC,EAAQ,KACtBC,EAAQD,EAAQ,KAEhBE,EAAWL,EAAMM,MAAMC,OAAOF,SAIlCJ,EADe,WAAbI,EACO,SACa,WAAbA,EACA,SACa,SAAbA,EACA,OAEAA,EAd6B,MAiBhBG,mBAAc,IAjBE,mBAiBjCC,EAjBiC,KAiB3BC,EAjB2B,OAkBRF,mBAAc,IAlBN,mBAkBjCG,EAlBiC,KAkBvBC,EAlBuB,OAmBNJ,mBAAiB,GAnBX,mBAmBjCK,EAnBiC,KAmBtBC,EAnBsB,OAoBdN,mBAAiB,IApBH,mBAoBjCO,EApBiC,KAoB1BC,EApB0B,OAqBNR,mBAAiB,IArBX,mBAqBjCS,EArBiC,KAqBtBC,EArBsB,OAuBVV,mBAAiB,GAvBP,mBAuBjCW,EAvBiC,KAuBxBC,EAvBwB,OAwBAZ,mBAAiB,GAxBjB,mBAwBjCa,EAxBiC,KAwBnBC,EAxBmB,OAyBJd,mBAAiB,GAzBb,mBAyBjCe,EAzBiC,KAyBrBC,EAzBqB,OA0BVhB,mBAAiB,GA1BP,mBA0BjCiB,EA1BiC,KA0BxBC,EA1BwB,OA4BVlB,oBAAkB,GA5BR,mBA4BjCmB,GA5BiC,KA4BxBC,GA5BwB,QA6BRpB,oBAAkB,GA7BV,qBA6BjCqB,GA7BiC,MA6BvBC,GA7BuB,SA8BlBtB,mBAAiB,GA9BC,qBA8BjCuB,GA9BiC,MA8B5BC,GA9B4B,SA+BlBxB,mBAAiB,GA/BC,qBA+BjCyB,GA/BiC,MA+B5BC,GA/B4B,SAgCE1B,mBAAS,GAhCX,qBAgCjC2B,GAhCiC,MAgClBC,GAhCkB,SAiCA5B,mBACtC,kDAlCsC,qBAiCjC6B,GAjCiC,MAiCnBC,GAjCmB,SAoCN9B,mBAAiB,IApCX,qBAoCjC+B,GApCiC,MAoCtBC,GApCsB,SAsCdhC,mBAAiB,cAtCH,qBAsCjCiC,GAtCiC,MAsC1BC,GAtC0B,MAwClCC,GAAO,CACX,6DACA,0FACA,+DACA,sEACA,+EACA,2DACA,iFACA,qFACA,mDAjDsC,GAoDNnC,mBAAc,IApDR,qBAoDjCoC,GApDiC,MAoDtBC,GApDsB,SAsDJrC,mBAAS,IAtDL,qBAsDjCsC,GAtDiC,MAsDrBC,GAtDqB,SAuDFvC,mBAAS,IAvDP,qBAuDjCwC,GAvDiC,MAuDpBC,GAvDoB,MAyDxC,SAASC,GAAaC,EAAaC,GACjC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGvDK,qBAAU,WACRhB,GAAaG,GAAKU,KAAKC,MAAsB,EAAhBD,KAAKE,YAElCE,IAASC,OAAOC,oBAAmB,SAACC,GAClC,IAAIC,EAAUC,SAASC,cAAc,kBACjCC,EAAaF,SAASC,cAAc,gBAExC,GAAIH,EAAK,CA8BP,GA7BAlD,EAAQkD,GAERK,IAAGC,WAAW,SACXC,IAAIP,EAAIQ,KACRC,WACC,CACEC,wBAAwB,IAE1B,SAACH,GACCvD,EAAYuD,EAAII,WAIL,WAAblE,GACFqC,GAASxC,EAAY,CAAEsE,QAAStB,GAAa,GAAI,IAAKuB,KAAM,OAG7C,WAAbpE,GACFD,EACGsE,IAAI,kCACJC,MAAK,SAACC,GACLlC,GAASkC,EAAIL,KAAKM,SAClBhC,GAAa+B,EAAIL,SAElBO,OAAM,SAACC,GACNC,QAAQC,IAAI,yBAA0BF,OAIvCpD,GACH,GAAiB,WAAbtB,GAAmC,eAAVoC,GAC3BC,GAAS,oBACOoB,SAASC,cACvB,cAEQmB,MAAMC,QAAU,OAC1BrE,EAAa,QAEbsE,GAAGC,QAAUC,aAAY,WACvBxE,GAAa,SAACyE,GAAD,OAAOA,EAAI,OACvB,KAIH1B,IACFA,EAAQqB,MAAMC,QAAU,aAGtBtB,GAAWG,IACbH,EAAQqB,MAAMC,QAAU,OACxBnB,EAAWkB,MAAMC,QAAU,cAIhC,IAGH,IAAMC,GAAKtF,IAAM0F,SACXC,GAAU3F,IAAM0F,SAChBE,GAAY5F,IAAM0F,SAmCxBhC,qBAAU,WACU,IAAd3C,GAlCQ,WAGZ,GAFA8E,cAAcP,GAAGC,SAEH,eAAV5C,GAAwB,CAC1B,IAAImD,EAAO9B,SAASC,cAAc,gBAC9B8B,EAAQ/B,SAASC,cAAc,SAC/BlD,EAAYiD,SAASC,cAAc,cAEnC6B,IACFA,EAAKV,MAAMY,QAAU,IACrBF,EAAKV,MAAMa,OAAS,aAElBF,IACFA,EAAMG,gBAAgB,YACtBH,EAAMI,SAGJpF,IACFA,EAAUqE,MAAMC,QAAU,QAG5BM,GAAQJ,QAAUC,aAAY,WAC5BtE,GAAS,SAACkF,GAAD,OAAUA,EAAO,OACzB,MAYHC,KAED,CAACtF,IAEJ2C,qBAAU,WACM,IAAVzC,IAEFqF,KACA9D,GAAgB,gDAEjB,CAACvB,IAEJyC,qBAAU,WACJ7B,KApBJ+D,GAAUL,QAAUC,aAAY,WAC9B5D,GAAW,SAAC6D,GAAD,OAAOA,EAAI,OACrB,QAqBF,CAAC5D,KAEJ,IAAI0E,GAAc,EACdC,GAAO,IAAIC,KACXC,GAAIF,GAAKG,WACTtD,GAAMmD,GAAKI,aACXnB,GAAIe,GAAKK,aACTC,GAAIN,GAAKO,cACTC,GAAIR,GAAKS,WAAa,EACtBC,GAAIV,GAAKW,UAiHPb,GAAe,WACnBtE,IAAY,GAEZ6D,cAAcD,GAAUL,SACxBM,cAAcF,GAAQJ,SAEtB,IAAI6B,EAASpD,SAASC,cAAc,WAChCoD,EAAerD,SAASC,cAC1B,kBAEE8B,EAAQ/B,SAASC,cAAc,SAEnC,IAAI8B,EAMF,OAAO,KALPA,EAAMuB,OACNvB,EAAMwB,aAAa,WAAY,IAC/BxB,EAAMwB,aAAa,WAAY,IAC/BxB,EAAMwB,aAAa,YAAa,KAK9BH,GAAUC,IACZD,EAAOhC,MAAMC,QAAU,QACvBgC,EAAajC,MAAMY,QAAU,MAC7BqB,EAAajC,MAAMa,OAAS,aAG9B,IAAIuB,EAAWxD,SAASC,cAAc,aAClCuD,IACFA,EAASpC,MAAMC,QAAU,UAiC7B3B,qBAAU,WARS,IAAC+D,EASlBnG,EAtBqB,SAACoG,GACtB,IAAMC,EAAOhF,GACb,OAAO+E,EAAEE,MAAM,IAAI3B,QAAO,SAACR,EAAWoC,GAAZ,OAA0BpC,IAAMkC,EAAKE,MAAIC,OAoBxDC,CAAe5G,IAC1Be,GAAOqB,KAAKyE,MAAM3G,EAAU,GAAKM,EAAU,MAC3CS,GAAOmB,KAAKyE,MAAO3G,EAAUM,EAAW,KAExCH,EArBwB,SAACkG,GACzB,IAAMC,EAAOhF,GACb,OAAO+E,EAAEE,MAAM,IAAI3B,QAAO,SAACR,EAAWoC,GAAZ,OAA0BpC,IAAMkC,EAAKE,MAAIC,OAmBnDG,CAAkB9G,IAbhBsG,EAcPtG,EAbNY,IACC0F,EAAMK,SAAWnF,GAAMmF,QACzBxB,OAYH,CAACnF,IAEJuC,qBAAU,WACJ3B,KACe,WAAbxB,GAvLOgG,GAAbtE,IAAO,GAAoB,EAAoBmB,GAAa,GAAI,IAEhEd,GAAiBiE,IAEjBpC,IAAGC,WAAW,SACXC,IAAI1D,EAAK2D,KACT4D,OAAO,CACNC,OAAQtH,EAASsH,OAAS5B,GAC1B6B,YACE7E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAASuH,YAAc,EACvBvH,EAASuH,YACfC,MACE9E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAASwH,MAAQ,EACjBxH,EAASwH,MACfC,QACE/E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCQ,GACApB,EAASyH,QACfC,QACEhF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,IACxCQ,GAAMpB,EAAS0H,QACbtG,GAEFpB,EAAS0H,QACfC,cACEjF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GAA5C,sBAESZ,EAAS2H,eAFlB,CAGM,CAAEvG,IAAKA,GAAKmE,KAAK,GAAD,OAAKM,GAAL,YAAUrD,GAAV,YAAiBoC,GAAjB,YAAsByB,GAAtB,YAA2BF,GAA3B,YAAgCF,OAElDjG,EAAS2H,iBAyJO,WAAbjI,GApJAgG,GAAbtE,IAAO,GAAoB,EAAoBmB,GAAa,GAAI,IAEhEd,GAAiBiE,IAEjBpC,IAAGC,WAAW,SACXC,IAAI1D,EAAK2D,KACT4D,OAAO,CACNC,OAAQtH,EAASsH,OAAS5B,GAC1BkC,YACElF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAAS4H,YAAc,EACvB5H,EAAS4H,YACfJ,MACE9E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAASwH,MAAQ,EACjBxH,EAASwH,MACfC,QACE/E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCQ,GACApB,EAASyH,QACfC,QACEhF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,IACxCQ,GAAMpB,EAAS0H,QACbtG,GAEFpB,EAAS0H,QACfG,cACEnF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GAA5C,sBAESZ,EAAS6H,eAFlB,CAGM,CAAEzG,IAAKA,GAAKmE,KAAK,GAAD,OAAKM,GAAL,YAAUrD,GAAV,YAAiBoC,GAAjB,YAAsByB,GAAtB,YAA2BF,GAA3B,YAAgCF,OAElDjG,EAAS6H,iBAsHO,WAAbnI,IAjHAgG,GAAbtE,IAAO,GAAoB,EAAoBmB,GAAa,GAAI,IAEhEd,GAAiBiE,IAEjBpC,IAAGC,WAAW,SACXC,IAAI1D,EAAK2D,KACT4D,OAAO,CACNC,OAAQtH,EAASsH,OAAS5B,GAC1BoC,YACEpF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAAS8H,YAAc,EACvB9H,EAAS8H,YACfN,MACE9E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCZ,EAASwH,MAAQ,EACjBxH,EAASwH,MACfC,QACE/E,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACxCQ,GACApB,EAASyH,QACfC,QACEhF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,IACxCQ,GAAMpB,EAAS0H,QACbtG,GAEFpB,EAAS0H,QACfK,cACErF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GAA5C,sBAESZ,EAAS+H,eAFlB,CAGM,CAAE3G,IAAKA,GAAKmE,KAAK,GAAD,OAAKM,GAAL,YAAUrD,GAAV,YAAiBoC,GAAjB,YAAsByB,GAAtB,YAA2BF,GAA3B,YAAgCF,OAElDjG,EAAS+H,oBAqFlB,CAAC3G,GAAKF,KAkCT,OACE,qCACE,cAAC,IAAD,CAAM8G,MAAM,+BAEE,WAAbtI,GACY,WAAbA,GACa,WAAbA,EACE,qCACE,qBAAKuI,UAAU,kBACdnI,EACC,sBAAKmI,UAAU,qBAAf,UACE,cAAC,IAAD,CAAKC,KAAK,QAAQC,KAAK,SACvB,sBAAKF,UAAU,gBAAf,UACgB,WAAbvI,EACC,sBAAKuI,UAAU,aAAf,UACE,2HAIA,0BACEG,SAAU,SAACC,GACTjG,GAAciG,EAAEC,OAAO1B,OACvBtE,GAAe,KAEjBiG,UAAW,IACXC,UAAW,IACX/D,GAAG,WAEL,wBAAQA,GAAG,MAAMgE,QA5DV,WACvB,IAAIvE,EAAUf,SAASC,cAAc,eACjCsF,EAAWvF,SAASC,cAAc,WAClCuF,EAAMxF,SAASC,cAAc,QAC7BlD,EAAYiD,SAASC,cAAc,cAInCjB,GAAW8E,QAAU,KAAO9E,GAAW8E,QAAU,IAFvC,4CAGFhC,KAAK9C,KACbJ,GAASI,IACTwG,EAAIjC,aAAa,WAAY,IAC7BgC,EAAShC,aAAa,WAAY,IAClCxG,EAAUqE,MAAMC,QAAU,QAC1BN,EAAQK,MAAMC,QAAU,OACxBoE,YAAW,WACTnE,GAAGC,QAAUC,aAAY,WACvBxE,GAAa,SAACyE,GAAD,OAAOA,EAAI,OACvB,OACF,MAEHtC,GACE,+GAIJA,GACE,4EAiCY,gBAGA,oBAAG2F,UAAU,aAAb,UAA2B9F,GAAW8E,OAAtC,UACA,4BAAI5E,QAGN,GAGF,oBAAI4F,UAAU,YAAd,SAA2B/H,IAE3B,sBAAK+H,UAAU,cAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,QAAf,SACGnG,GAAMiF,MAAM,IAAI8B,KAAI,SAACC,EAAMC,GAC1B,IAAIC,EAcJ,OAbID,EAAQzI,EAAU2G,SACpB+B,EACEF,IAASxI,EAAUyI,GA/GjB,UACF,MAkHW,MAATD,GACExI,EAAUyI,KAAWD,IACvBA,EAAOxI,EAAUyI,KAKnBA,IAAUzI,EAAU2G,OAEpB,sBAEEgB,UAAW,OACX1D,MAAO,CACLyE,MAAOA,EACPC,WAAY,IACZC,eAAgB,aANpB,SASY,MAATJ,EAAe,OAAMA,GARjBC,GAcT,sBAEEd,UAAW,OACX1D,MAAO,CAAEyE,MAAOA,GAHlB,SAKY,MAATF,EAAe,OAAMA,GAJjBC,QAUb,uBACEI,QAAS,SAACd,GAAD,OAAOA,EAAEe,kBAClBC,OAAQ,SAAChB,GAAD,OAAOA,EAAEe,kBACjB3E,GAAG,OACH8D,UAAWzG,GAAMmF,OACjBmB,SA7KA,SAACC,GACdnH,KACHX,EAAa8H,EAAEC,OAAO1B,OACtB/F,GAAc,SAAC+D,GAAD,OAAOA,EAAI,KACzB3D,IAAW,KA0KKqI,UAAQ,EACRC,KAAK,OACLC,aAAa,MACbC,YAAa,gCAGf,sBAAKxB,UAAU,WAAf,UACE,oBAAGA,UAAU,WAAb,uBAAmC3I,KACnC,oBAAG2I,UAAU,WAAb,UACe,UAAZvI,GAAwB,eACZ,UAAZA,GACC,0CACW,UAAZA,GACC,8DAEJ,oBAAGuI,UAAU,UAAb,sBACYnI,EAAOA,EAAK4J,YAAc,aADtC,IACqD,IAClD1J,EAAWA,EAASsH,OAAS,UAFhC,WAEmD,IAChDtH,EAAWA,EAAS2J,KAAO,mBAIhC,sBAAK1B,UAAU,YAAf,UACE,mBAAGA,UAAU,WAAb,SAAyB7H,IACzB,mBAAG6H,UAAU,UAAb,SACE,cAAC,IAAD,CAAM2B,GAAG,QAAT,6BAKN,oBAAG3B,UAAU,YAAb,yBAAsCrG,MAEtC,sBAAKqG,UAAU,WAAf,UACE,mDACA,sBAAKA,UAAU,kBAAf,UACE,mBAAG4B,KAAI,iBAAYnK,GAAnB,SACE,kDAAqBJ,OAEvB,cAAC,IAAD,CAAMsK,GAAG,QAAT,SACE,qDAKN,sBAAK3B,UAAU,SAAf,UACE,6BAAKvG,KACL,oBAAGuG,UAAU,cAAb,UACE,qCAAQzG,MADV,yBACsD,IACpD,+BACGxB,EAAWA,EAASsH,OAAS,qBAGlC,mBAAGW,UAAU,aAAb,SACqB,IAAlBzG,GAAA,6FAIuC,WADA9B,EAEI,KACA,GAN3C,yEAUuC,WADAA,EAEI,KACA,GAZ3C,yEAgBuC,WADAA,EAEI,KACA,GAlB3C,2HAqBG,OAEN,mBAAGuI,UAAU,aAAb,SACGvF,KAAKyE,MAAO3G,EAAUI,EAAc,MAAQ,GACzC,4EACA,KAEN,uDACwB,+BAAOtB,OAE/B,yDAC0B,+BAAQ8B,IAAM,SAExC,6DAC+B,IAC7B,+BAAQE,IAAM,SAEhB,gDACiB,iCAAOR,EAAP,iBAEjB,4CACa,iCAAOV,EAAP,iBAEb,kDACmB,+BAAOI,OAE1B,wDACyB,+BAAOE,OAEhC,0CACY,IACV,iCACIgC,KAAKyE,MAAO3G,EAAUI,EAAc,KAElC8B,KAAKyE,MAAO3G,EAAUI,EAAc,KADpC,IAFN,UAOF,mDACoB,+BAAOA,OAE3B,8CACe,+BAAOkB,GAAMmF,SAD5B,oCAIA,wDAC0B,IACxB,+BACGrG,EAAakB,GAAMmF,OAChBrG,EAAakB,GAAMmF,OACnB,SAGM,WAAbvH,EACC,+CACgB,+BAAOuC,GAAU6H,YAGjC,GAEF,mBAAGvF,MAAO,CAAEwF,UAAW,QAAvB,SACE,cAAC,IAAD,CAAMH,GAAG,QAAT,uDAOV,cAAC,IAAD,OAIJ,oBAAG3B,UAAU,mBAAb,4BACkBvI,EADlB,2BACoD,IAClD,mBAAGmK,KAAK,QAAR,2BAOK3K,a,gCCjqBf,8CAcM8K,GAdN,YAcaC,IAASC,cAVC,CACpBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,+CAKGlH,EAAK2G,IAASQ,YAEZT,O,gCCjBf,mBAiBeU,IAff,SAAcrL,GACV,OACI,eAAC,IAAD,WACQ,gCAAQA,EAAM2I,QACd,iK,yFCyPD2C,IA1Pf,SAAmBtL,GAAY,MAELQ,mBAAc,IAFT,mBAEtBC,EAFsB,KAEhBC,EAFgB,OAGaF,mBAAc,IAH3B,mBAGtB+K,EAHsB,KAGPC,EAHO,KAM7BhI,qBAAU,WACR,IAAIiI,GAAY,EAQhB,OAPAhI,IAASC,OAAOC,oBAAmB,SAACC,GAC9BA,GACE6H,GACF/K,EAAQkD,MAIP,WACL6H,GAAY,KAEb,IAEHjI,qBAAU,WACR,IAAIiI,GAAY,EAehB,OAdIhL,GACFwD,IAAGC,WAAW,SACXC,IADH,OACO1D,QADP,IACOA,OADP,EACOA,EAAM2D,KACVC,WACC,CACEC,wBAAwB,IAE1B,SAACH,GACKsH,GACFD,EAAiBrH,EAAII,OAAOgH,kBAK/B,WACLE,GAAY,KAEb,CAAChL,IAEJ,IAAMiL,EAAUC,cAEZC,GAAe,EAkCbC,EAAgB,WACpBpI,IAASC,OAAOoI,UAChBJ,EAAQK,KAAK,aAGXC,GAAY,EAiBhB,OACE,qCACE,qBAAKpD,UAAU,eAAeQ,QArCP,WACzBwC,GAAe,EAEf,IAAIK,EAAYnI,SAASC,cACvB,oBAEEmI,EAASpI,SAASC,cAAc,iBAEpCkI,EAAU/G,MAAMC,QAAU,OAC1B+G,EAAOhH,MAAMY,QAAU,IACvBoG,EAAOhH,MAAMiH,OAAS,QA6BpB,sBAAKvD,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,SACE,oBAAG4B,KAAK,IAAR,oBACS,8BAIX,sBAAK5B,UAAU,aAAf,UACE,6BACE,cAAC,IAAD,CAAM2B,GAAIvK,EAAM6I,KAAhB,SACE,6BAAK7I,EAAM8I,WAMf,cAAC,IAAD,CAAMyB,GAAG,WAAT,SACE,qBACE6B,IACE3L,EACIA,EAAK4L,SACL,mJAENzD,UAAU,yBAId,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,kBAAkBQ,QA/Cf,WAC1B4C,GAAaA,EACb,IAAIM,EAAUxI,SAASC,cACrB,yBAGEiI,GACFM,EAAQpH,MAAMiH,OAAS,MACvBG,EAAQpH,MAAMY,QAAU,MAExBwG,EAAQpH,MAAMiH,OAAS,OACvBG,EAAQpH,MAAMY,QAAU,MAoClB,SACE,sBACEyG,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,YAAY,MACZC,OAAO,UACPC,KAAK,OACLC,cAAc,QACdC,eAAe,QATjB,UAWE,sBAAMH,OAAO,OAAO5F,EAAE,gBAAgB6F,KAAK,SAC3C,sBAAM7F,EAAE,2FACR,sBAAMA,EAAE,kCAIZ,sBAAK4B,UAAU,uBAAf,UACE,+CACC2C,EACCA,EAAc/B,KAAI,SAACwD,GACjB,OACE,sBAAKpE,UAAU,eAAf,UACE,oBAAGA,UAAU,SAAb,UACE,wCADF,IACqBoE,EAAEC,UAEvB,oBAAGrE,UAAU,sBAAb,UACGoE,EAAEE,QADL,IACc,uCAAUF,EAAE9G,aALO8G,EAAE5H,OAWzC,qBAAKwD,UAAU,8BAKrB,yBAAQA,UAAU,kBAAkBQ,QAASyC,EAA7C,UACE,sBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,YAAY,MACZC,OAAO,UACPC,KAAK,OACLC,cAAc,QACdC,eAAe,QATjB,UAWE,sBAAMH,OAAO,OAAO5F,EAAE,gBAAgB6F,KAAK,SAC3C,sBAAM7F,EAAE,oFACR,sBAAMA,EAAE,iCAEV,4CAGF,sBAAK4B,UAAU,kBAAkBQ,QAhJpB,WACnBwC,GAAgBA,EAEhB,IAAIK,EAAYnI,SAASC,cACvB,oBAEEmI,EAASpI,SAASC,cAAc,iBAEhC6H,GACFK,EAAU/G,MAAMC,QAAU,QAC1B+G,EAAOhH,MAAMY,QAAU,MACvBoG,EAAOhH,MAAMiH,OAAS,QAEtBF,EAAU/G,MAAMC,QAAU,OAC1B+G,EAAOhH,MAAMY,QAAU,IACvBoG,EAAOhH,MAAMiH,OAAS,OAiIlB,UACE,qBAAKvD,UAAU,oBAAf,eACA,qBAAKA,UAAU,mBAAf,eACA,qBAAKA,UAAU,oBAAf,wBAKN,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,sBAAd,SACE,oBAAG4B,KAAK,IAAR,oBACS,8BAIX,sBAAK5B,UAAU,mBAAf,UACE,6BACG5I,EAAMmN,KACL,mBAAG3C,KAAMxK,EAAM6I,KAAf,SAAsB7I,EAAM8I,OAE5B,cAAC,IAAD,CAAMyB,GAAIvK,EAAM6I,KAAhB,SACE,6BAAK7I,EAAM8I,WAKjB,cAAC,IAAD,CAAMyB,GAAG,WAAT,SACE,qBACE6B,IACE3L,EACIA,EAAK4L,SACL,mJAENzD,UAAU,yBAId,yBAAQA,UAAU,wBAAwBQ,QAASyC,EAAnD,UACE,sBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,YAAY,MACZC,OAAO,UACPC,KAAK,OACLC,cAAc,QACdC,eAAe,QATjB,UAWE,sBAAMH,OAAO,OAAO5F,EAAE,gBAAgB6F,KAAK,SAC3C,sBAAM7F,EAAE,oFACR,sBAAMA,EAAE,iCAEV,uD,gCCvPZ,8BAceoG,IAXG,WAChB,OACE,sBAAKxE,UAAU,cAAf,UACE,wEACA,cAAC,IAAD,CAAM2B,GAAG,WAAT,SACE","file":"static/js/13.d0182e01.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NotLogged from \"./subComponents/NotLogged\";\r\nimport \"../style/css/main.css\";\r\nimport Nav from \"./Navs/LoggedNav\";\r\nimport Firebase, { db } from \"./services/Firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport HTML from \"./subComponents/Html\";\r\n\r\nconst Battle = React.memo((props: any) => {\r\n  const randomWords = require(\"random-words\");\r\n  const axios = require(\"axios\");\r\n\r\n  const category = props.match.params.category;\r\n  let HEADER;\r\n\r\n  if (category === \"random\") {\r\n    HEADER = \"Random\"; // 5 - 20\r\n  } else if (category === \"normal\") {\r\n    HEADER = \"Normal\"; // 30 - 50\r\n  } else if (category === \"hard\") {\r\n    HEADER = \"Hard\"; // 60 - 80\r\n  } else {\r\n    HEADER = category;\r\n  }\r\n\r\n  const [user, setUser] = useState<any>(\"\");\r\n  const [userData, setUserData] = useState<any>(\"\");\r\n  const [countdown, setCountdown] = useState<number>(5);\r\n  const [timer, setTimer] = useState<number>(60);\r\n  const [userInput, setUserInput] = useState<string>(\"\");\r\n\r\n  const [symbols, setSymbols] = useState<number>(0);\r\n  const [wrongSymbols, setWrongSymbols] = useState<number>(0);\r\n  const [allSymbols, setAllSymbols] = useState<number>(0);\r\n  const [seconds, setSeconds] = useState<number>(1);\r\n\r\n  const [started, setStarted] = useState<boolean>(false);\r\n  const [finished, setFinished] = useState<boolean>(false);\r\n  const [wpm, setWpm] = useState<number>(0);\r\n  const [cpm, setCpm] = useState<number>(0);\r\n  const [displayPoints, setDisplayPoints] = useState(0);\r\n  const [resultStatus, setResultStatus] = useState<string>(\r\n    \"Race finished, below you have your statistics.\"\r\n  );\r\n  const [randomTip, setRandomTip] = useState<string>(\"\");\r\n\r\n  const [quote, setQuote] = useState<string>(\"Loading...\");\r\n\r\n  const tips = [\r\n    \"You can use CTRL + Backspace (Win) to delete a whole word.\",\r\n    \"Try to type without looking at the keyboard, look at your screen, you will type faster!\",\r\n    \"Use your all 10 fingers when you type, you will type faster.\",\r\n    \"Is better to type correctly and a bit slower than wrong and faster.\",\r\n    \"If you have to type an uppercase letter use SHIFT + key instead of CapsLock.\",\r\n    \"Maintain a good and a comfortable position of your body.\",\r\n    \"Place your hands on the home row of the keyboard, hand placement is important.\",\r\n    \"Stretch your hands, shoulders, your neck and don't be tired, you will type easier.\",\r\n    \"Scan the text in advance with one or two words.\",\r\n  ];\r\n\r\n  const [quoteData, setQuoteData] = useState<any>({});\r\n\r\n  const [customText, setCustomText] = useState(\"\");\r\n  const [customError, setCustomError] = useState(\"\");\r\n\r\n  function randomPoints(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setRandomTip(tips[Math.floor(Math.random() * 9)]);\r\n\r\n    Firebase.auth().onAuthStateChanged((usr: any) => {\r\n      let spinner = document.querySelector(\".battleSpinner\") as HTMLDivElement;\r\n      let mustLogged = document.querySelector(\".notLoggedIn\") as HTMLDivElement;\r\n\r\n      if (usr) {\r\n        setUser(usr);\r\n\r\n        db.collection(\"users\")\r\n          .doc(usr.uid)\r\n          .onSnapshot(\r\n            {\r\n              includeMetadataChanges: true,\r\n            },\r\n            (doc: any) => {\r\n              setUserData(doc.data());\r\n            }\r\n          );\r\n\r\n        if (category === \"random\") {\r\n          setQuote(randomWords({ exactly: randomPoints(20, 25), join: \" \" }));\r\n        }\r\n\r\n        if (category === \"quotes\") {\r\n          axios\r\n            .get(\"https://api.quotable.io/random\")\r\n            .then((res: any) => {\r\n              setQuote(res.data.content);\r\n              setQuoteData(res.data);\r\n            })\r\n            .catch((err: any) => {\r\n              console.log(\"An error has occured: \", err);\r\n            });\r\n        }\r\n\r\n        if (!started) {\r\n          if (category === \"custom\" && quote === \"Loading...\") {\r\n            setQuote(\"Waiting for text\");\r\n            let countdown = document.querySelector(\r\n              \".countdown\"\r\n            ) as HTMLHeadingElement;\r\n            countdown.style.display = \"none\";\r\n            setCountdown(5);\r\n          } else {\r\n            id.current = setInterval(() => {\r\n              setCountdown((s) => s - 1);\r\n            }, 1000);\r\n          }\r\n        }\r\n\r\n        if (spinner) {\r\n          spinner.style.display = \"none\";\r\n        }\r\n      } else {\r\n        if (spinner && mustLogged) {\r\n          spinner.style.display = \"none\";\r\n          mustLogged.style.display = \"block\";\r\n        }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // start the test\r\n  const id = React.useRef<any>();\r\n  const idTimer = React.useRef<any>();\r\n  const idSeconds = React.useRef<any>();\r\n\r\n  const clear = () => {\r\n    clearInterval(id.current);\r\n\r\n    if (quote !== \"Loading...\") {\r\n      let test = document.querySelector(\".testWrapper\") as HTMLDivElement;\r\n      let input = document.querySelector(\"#text\") as HTMLInputElement;\r\n      let countdown = document.querySelector(\".countdown\")! as HTMLHeadElement;\r\n\r\n      if (test) {\r\n        test.style.opacity = \"1\";\r\n        test.style.filter = \"blur(0px)\";\r\n      }\r\n      if (input) {\r\n        input.removeAttribute(\"disabled\");\r\n        input.focus();\r\n      }\r\n\r\n      if (countdown) {\r\n        countdown.style.display = \"none\";\r\n      }\r\n\r\n      idTimer.current = setInterval(() => {\r\n        setTimer((time) => time - 1);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    idSeconds.current = setInterval(() => {\r\n      setSeconds((s) => s + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countdown === 0) {\r\n      clear();\r\n    }\r\n  }, [countdown]);\r\n\r\n  useEffect(() => {\r\n    if (timer === 0) {\r\n      // test finished.\r\n      finishedRace();\r\n      setResultStatus(\"Time's up, below you have your statistics\");\r\n    }\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    if (started) {\r\n      startTimer();\r\n    }\r\n  }, [started]);\r\n\r\n  let givenPoints = 0;\r\n  let date = new Date();\r\n  let h = date.getHours();\r\n  let min = date.getMinutes();\r\n  let s = date.getSeconds();\r\n  let y = date.getFullYear();\r\n  let m = date.getMonth() + 1;\r\n  let d = date.getDate();\r\n\r\n  const categoryRandom = () => {\r\n    wpm <= 30 ? (givenPoints = 5) : (givenPoints = randomPoints(20, 40));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        randomTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.randomTests + 1\r\n            : userData.randomTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        randomHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.randomHistory,\r\n                { wpm: wpm, time: `${h}:${min}:${s} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.randomHistory,\r\n      });\r\n  };\r\n\r\n  const categoryQuotes = () => {\r\n    wpm <= 50 ? (givenPoints = 5) : (givenPoints = randomPoints(50, 80));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        quotesTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.quotesTests + 1\r\n            : userData.quotesTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        quotesHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.quotesHistory,\r\n                { wpm: wpm, time: `${h}:${min}:${s} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.quotesHistory,\r\n      });\r\n  };\r\n\r\n  const categoryCustom = () => {\r\n    wpm <= 30 ? (givenPoints = 5) : (givenPoints = randomPoints(20, 40));\r\n\r\n    setDisplayPoints(givenPoints);\r\n\r\n    db.collection(\"users\")\r\n      .doc(user.uid)\r\n      .update({\r\n        points: userData.points + givenPoints,\r\n        customTests:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.customTests + 1\r\n            : userData.customTests,\r\n        races:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? userData.races + 1\r\n            : userData.races,\r\n        lastWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm\r\n            : userData.lastWPM,\r\n        bestWPM:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? wpm > userData.bestWPM\r\n              ? wpm\r\n              : userData.bestWPM\r\n            : userData.bestWPM,\r\n        customHistory:\r\n          Math.round((symbols / allSymbols) * 100) >= 70\r\n            ? [\r\n                ...userData.customHistory,\r\n                { wpm: wpm, time: `${h}:${min}:${s} ${d}/${m}/${y}` },\r\n              ]\r\n            : userData.customHistory,\r\n      });\r\n  };\r\n\r\n  const finishedRace = () => {\r\n    setFinished(true);\r\n\r\n    clearInterval(idSeconds.current);\r\n    clearInterval(idTimer.current);\r\n\r\n    let result = document.querySelector(\".result\") as HTMLDivElement;\r\n    let speedSection = document.querySelector(\r\n      \".neededWrapper\"\r\n    ) as HTMLDivElement;\r\n    let input = document.querySelector(\"#text\") as HTMLInputElement;\r\n\r\n    if (input) {\r\n      input.blur();\r\n      input.setAttribute(\"disabled\", \"\");\r\n      input.setAttribute(\"readonly\", \"\");\r\n      input.setAttribute(\"maxlength\", \"0\");\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n    if (result && speedSection) {\r\n      result.style.display = \"block\";\r\n      speedSection.style.opacity = \"0.5\";\r\n      speedSection.style.filter = \"blur(2px)\";\r\n    }\r\n\r\n    let testOver = document.querySelector(\".testOver\") as HTMLDivElement;\r\n    if (testOver) {\r\n      testOver.style.display = \"block\";\r\n    }\r\n  };\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!finished) {\r\n      setUserInput(e.target.value);\r\n      setAllSymbols((s) => s + 1);\r\n      setStarted(true);\r\n    }\r\n  };\r\n\r\n  const correctSymbols = (v: string) => {\r\n    const text = quote;\r\n    return v.split(\"\").filter((s: string, i: number) => s === text[i]).length;\r\n  };\r\n\r\n  const checkWrongSymbols = (v: string) => {\r\n    const text = quote;\r\n    return v.split(\"\").filter((s: string, i: number) => s !== text[i]).length;\r\n  };\r\n\r\n  let CORRECT_COLOR: string = \"#7e41da\";\r\n  let WRONG_COLOR: string = \"red\";\r\n\r\n  const isFinished = (value: string) => {\r\n    if (!finished) {\r\n      if (value.length === quote.length) {\r\n        finishedRace();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSymbols(correctSymbols(userInput));\r\n    setWpm(Math.round(symbols / 5 / (seconds / 60)));\r\n    setCpm(Math.round((symbols / seconds) * 60));\r\n\r\n    setWrongSymbols(checkWrongSymbols(userInput));\r\n    isFinished(userInput);\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    if (finished) {\r\n      if (category === \"random\") {\r\n        categoryRandom();\r\n      } else if (category === \"quotes\") {\r\n        categoryQuotes();\r\n      } else if (category === \"custom\") {\r\n        categoryCustom();\r\n      }\r\n    }\r\n  }, [wpm, finished]);\r\n\r\n  const handleCustomText = () => {\r\n    let content = document.querySelector(\".customText\") as HTMLDivElement;\r\n    let textarea = document.querySelector(\"#custom\") as HTMLTextAreaElement;\r\n    let btn = document.querySelector(\"#btn\") as HTMLButtonElement;\r\n    let countdown = document.querySelector(\".countdown\") as HTMLHeadingElement;\r\n\r\n    const regEx = /^[a-zA-Z0-9\\.\\,\\;\\?\\'\\\"\\(\\)\\!\\$\\-\\& \\s]*$/;\r\n\r\n    if (customText.length >= 100 && customText.length <= 250) {\r\n      if (regEx.test(customText)) {\r\n        setQuote(customText);\r\n        btn.setAttribute(\"disabled\", \"\");\r\n        textarea.setAttribute(\"readonly\", \"\");\r\n        countdown.style.display = \"block\";\r\n        content.style.display = \"none\";\r\n        setTimeout(() => {\r\n          id.current = setInterval(() => {\r\n            setCountdown((s) => s - 1);\r\n          }, 1000);\r\n        }, 500);\r\n      } else {\r\n        setCustomError(\r\n          \"You can only use lowercase, uppercase letters, numbers, punctuation and some symbols such as: () ? ! - $ & \"\r\n        );\r\n      }\r\n    } else {\r\n      setCustomError(\r\n        \"The text length must be at least 100 characters and max 250 characters.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HTML title=\"JustType - Test your speed\" />\r\n\r\n      {category === \"random\" ||\r\n      category === \"quotes\" ||\r\n      category === \"custom\" ? (\r\n        <>\r\n          <div className=\"battleSpinner\"></div>\r\n          {user ? (\r\n            <div className=\"battleExtraWrapper\">\r\n              <Nav path=\"/play\" name=\"Main\" />\r\n              <div className=\"battleWrapper\">\r\n                {category === \"custom\" ? (\r\n                  <div className=\"customText\">\r\n                    <p>\r\n                      Enter your text below, make sure you follow the rules of\r\n                      characters; min = 100, max = 250.\r\n                    </p>\r\n                    <textarea\r\n                      onChange={(e) => {\r\n                        setCustomText(e.target.value);\r\n                        setCustomError(\"\");\r\n                      }}\r\n                      maxLength={250}\r\n                      minLength={150}\r\n                      id=\"custom\"\r\n                    ></textarea>\r\n                    <button id=\"btn\" onClick={handleCustomText}>\r\n                      Go\r\n                    </button>\r\n                    <p className=\"lengthText\">{customText.length}/250</p>\r\n                    <p>{customError}</p>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <h1 className=\"countdown\">{countdown}</h1>\r\n\r\n                <div className=\"testWrapper\">\r\n                  <div className=\"neededWrapper\">\r\n                    <div className=\"quote\">\r\n                      {quote.split(\"\").map((word, index) => {\r\n                        let color;\r\n                        if (index < userInput.length) {\r\n                          color =\r\n                            word === userInput[index]\r\n                              ? CORRECT_COLOR\r\n                              : WRONG_COLOR;\r\n\r\n                          if (word === \" \") {\r\n                            if (userInput[index] !== word) {\r\n                              word = userInput[index];\r\n                            }\r\n                          }\r\n                        }\r\n\r\n                        if (index === userInput.length) {\r\n                          return (\r\n                            <span\r\n                              key={index}\r\n                              className={\"word\"}\r\n                              style={{\r\n                                color: color,\r\n                                fontWeight: 700,\r\n                                textDecoration: \"underline\",\r\n                              }}\r\n                            >\r\n                              {word === \" \" ? \" \" : word}\r\n                            </span>\r\n                          );\r\n                        }\r\n\r\n                        return (\r\n                          <span\r\n                            key={index}\r\n                            className={\"word\"}\r\n                            style={{ color: color }}\r\n                          >\r\n                            {word === \" \" ? \" \" : word}\r\n                          </span> // is weird isn't it? is not a normal space is &nbsp; using alt + 2 2 5\r\n                        );\r\n                      })}\r\n                    </div>\r\n\r\n                    <input\r\n                      onPaste={(e) => e.preventDefault()}\r\n                      onCopy={(e) => e.preventDefault()}\r\n                      id=\"text\"\r\n                      maxLength={quote.length}\r\n                      onChange={handleInput}\r\n                      disabled\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      placeholder={\"Start typing the text above\"}\r\n                    />\r\n\r\n                    <div className=\"leftInfo\">\r\n                      <p className=\"category\">Category: {HEADER}</p>\r\n                      <p className=\"features\">\r\n                        {category == \"random\" && \"Random words\"}\r\n                        {category == \"quotes\" &&\r\n                          \"Lowercase, uppercase words, punctuation\"}\r\n                        {category == \"custom\" &&\r\n                          \"Allowed lowercase, uppercase words, punctuation, symbols\"}\r\n                      </p>\r\n                      <p className=\"account\">\r\n                        Account: {user ? user.displayName : \"Loading...\"},{\" \"}\r\n                        {userData ? userData.points : \"Loading\"} Points,{\" \"}\r\n                        {userData ? userData.rank : \"Loading...\"}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"rightInfo\">\r\n                      <p className=\"timeleft\">{timer}</p>\r\n                      <p className=\"abandon\">\r\n                        <Link to=\"/play\">Abandon</Link>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <p className=\"randomTip\">Random Tip: {randomTip}</p>\r\n\r\n                  <div className=\"testOver\">\r\n                    <p>This test is over.</p>\r\n                    <div className=\"testOverButtons\">\r\n                      <a href={`/speed/${category}`}>\r\n                        <button>New test on {HEADER}</button>\r\n                      </a>\r\n                      <Link to=\"/play\">\r\n                        <button>Go home</button>\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"result\">\r\n                    <h1>{resultStatus}</h1>\r\n                    <p className=\"givenPoints\">\r\n                      <span>+{displayPoints}</span> points. Total points:{\" \"}\r\n                      <span>\r\n                        {userData ? userData.points : \"Calculating..\"}\r\n                      </span>\r\n                    </p>\r\n                    <p className=\"infoResult\">\r\n                      {displayPoints === 5\r\n                        ? `You have to get over \r\n                                                            ${\r\n                                                              category ===\r\n                                                              \"random\"\r\n                                                                ? \"30\"\r\n                                                                : \"\"\r\n                                                            }\r\n                                                            ${\r\n                                                              category ===\r\n                                                              \"quotes\"\r\n                                                                ? \"50\"\r\n                                                                : \"\"\r\n                                                            }\r\n                                                            ${\r\n                                                              category ===\r\n                                                              \"custom\"\r\n                                                                ? \"30\"\r\n                                                                : \"\"\r\n                                                            }\r\n                                                            WPM for this category to get the normal amount of points.`\r\n                        : null}\r\n                    </p>\r\n                    <p className=\"notAllowed\">\r\n                      {Math.round((symbols / allSymbols) * 100) <= 70\r\n                        ? \"You have an accuracy that is less than 70%, your score will not be saved.\"\r\n                        : \"\"}\r\n                    </p>\r\n                    <p>\r\n                      Category of the test: <span>{HEADER}</span>\r\n                    </p>\r\n                    <p>\r\n                      WPM (Words Per Minute): <span>{!wpm ? \"0\" : wpm}</span>\r\n                    </p>\r\n                    <p>\r\n                      CPM (Characters Per Minute):{\" \"}\r\n                      <span>{!cpm ? \"0\" : cpm}</span>\r\n                    </p>\r\n                    <p>\r\n                      Text typed in: <span>{seconds} seconds</span>\r\n                    </p>\r\n                    <p>\r\n                      Time left: <span>{timer} seconds</span>\r\n                    </p>\r\n                    <p>\r\n                      Correct symbols: <span>{symbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Wrong symbols on text: <span>{wrongSymbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Accuracy:{\" \"}\r\n                      <span>\r\n                        {!Math.round((symbols / allSymbols) * 100)\r\n                          ? \"0\"\r\n                          : Math.round((symbols / allSymbols) * 100)}\r\n                        %\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Total keystrokes: <span>{allSymbols}</span>\r\n                    </p>\r\n                    <p>\r\n                      Text length: <span>{quote.length}</span> characters\r\n                      (including spaces)\r\n                    </p>\r\n                    <p>\r\n                      Unnecessary keystrokes:{\" \"}\r\n                      <span>\r\n                        {allSymbols > quote.length\r\n                          ? allSymbols - quote.length\r\n                          : \"0\"}\r\n                      </span>\r\n                    </p>\r\n                    {category === \"quotes\" ? (\r\n                      <p>\r\n                        A quote from: <span>{quoteData.author}</span>\r\n                      </p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p style={{ marginTop: \"20px\" }}>\r\n                      <Link to=\"/info\">How we do it & Good to know</Link>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <NotLogged />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p className=\"categoryNotExist\">\r\n          This category ({category}) does not exist, sorry!{\" \"}\r\n          <a href=\"/play\">Play</a>\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Battle;\r\n","import firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyBPuJnN5gI3o_YZeVNlZwOky-7Y6LDGrTI\",\r\n   authDomain: \"justtype-preview.firebaseapp.com\",\r\n   projectId: \"justtype-preview\",\r\n   storageBucket: \"justtype-preview.appspot.com\",\r\n   messagingSenderId: \"648878251377\",\r\n   appId: \"1:648878251377:web:e42775dc14919b1475ead0\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nexport const db = firebase.firestore();\r\n\r\nexport default fire;\r\n","import Helmet from \"react-helmet\";\r\n\r\nfunction Html(props:any) {\r\n    return (\r\n        <Helmet>\r\n                <title>{props.title}</title>\r\n                <style>\r\n                {`\r\n                 body {\r\n                    background-color: #0e0b11;       \r\n                  }\r\n                `}\r\n                </style>\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default Html\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../../style/css/main.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Firebase, { db } from \"../services/Firebase\";\r\n\r\nfunction LoggedNav(props: any) {\r\n  // states\r\n  const [user, setUser] = useState<any>(\"\");\r\n  const [notifications, setNotifications] = useState<any>(\"\");\r\n\r\n  // ui stuff & checking if the user is logged in\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    Firebase.auth().onAuthStateChanged((usr: any) => {\r\n      if (usr) {\r\n        if (isMounted) {\r\n          setUser(usr);\r\n        }\r\n      }\r\n    });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // fixing a bug\r\n    if (user) {\r\n      db.collection(\"users\")\r\n        .doc(user?.uid)\r\n        .onSnapshot(\r\n          {\r\n            includeMetadataChanges: true,\r\n          },\r\n          (doc: any) => {\r\n            if (isMounted) {\r\n              setNotifications(doc.data().notifications);\r\n            }\r\n          }\r\n        );\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [user]);\r\n\r\n  const history = useHistory();\r\n\r\n  let mobileStatus = false;\r\n\r\n  const handleMobile = () => {\r\n    mobileStatus = !mobileStatus;\r\n\r\n    let mobileNav = document.querySelector(\r\n      \".mobileNavLogged\"\r\n    ) as HTMLDivElement;\r\n    let effect = document.querySelector(\".effectLogged\") as HTMLDivElement;\r\n\r\n    if (mobileStatus) {\r\n      mobileNav.style.display = \"block\";\r\n      effect.style.opacity = \"0.5\";\r\n      effect.style.zIndex = \"999\";\r\n    } else {\r\n      mobileNav.style.display = \"none\";\r\n      effect.style.opacity = \"0\";\r\n      effect.style.zIndex = \"-2\";\r\n    }\r\n  };\r\n\r\n  const handleRemoveMobile = () => {\r\n    mobileStatus = false;\r\n\r\n    let mobileNav = document.querySelector(\r\n      \".mobileNavLogged\"\r\n    ) as HTMLDivElement;\r\n    let effect = document.querySelector(\".effectLogged\") as HTMLDivElement;\r\n\r\n    mobileNav.style.display = \"none\";\r\n    effect.style.opacity = \"0\";\r\n    effect.style.zIndex = \"-2\";\r\n  };\r\n\r\n  const handleSignOut = () => {\r\n    Firebase.auth().signOut();\r\n    history.push(\"/sign-in\");\r\n  };\r\n\r\n  let notStatus = false;\r\n\r\n  const handleNotifications = () => {\r\n    notStatus = !notStatus;\r\n    let wrapper = document.querySelector(\r\n      \".notificationsWrapper\"\r\n    ) as HTMLDivElement;\r\n\r\n    if (notStatus) {\r\n      wrapper.style.zIndex = \"900\";\r\n      wrapper.style.opacity = \"1\";\r\n    } else {\r\n      wrapper.style.zIndex = \"-100\";\r\n      wrapper.style.opacity = \"0\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"effectLogged\" onClick={handleRemoveMobile}></div>\r\n\r\n      <div className=\"navbarLogged\">\r\n        <h1 className=\"logoNavLogged\">\r\n          <a href=\"/\">\r\n            JustTyp<span></span>\r\n          </a>\r\n        </h1>\r\n\r\n        <div className=\"navContent\">\r\n          <ul>\r\n            <Link to={props.path}>\r\n              <li>{props.name}</li>\r\n            </Link>\r\n          </ul>\r\n\r\n          {/* {props.play ? <a href={props.path}>{props.name}</a> */}\r\n\r\n          <Link to=\"/profile\">\r\n            <img\r\n              src={\r\n                user\r\n                  ? user.photoURL\r\n                  : \"https://firebasestorage.googleapis.com/v0/b/justtype-preview.appspot.com/o/profileimage.jpg?alt=media&token=ff56cecc-ffce-42c5-8079-bcc806e70348\"\r\n              }\r\n              className=\"profileImageMobile\"\r\n            />\r\n          </Link>\r\n\r\n          <div className=\"notifications\">\r\n            <div className=\"notificationBox\" onClick={handleNotifications}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"44\"\r\n                height=\"44\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"#6f32be\"\r\n                fill=\"none\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                <path d=\"M10 5a2 2 0 0 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6\" />\r\n                <path d=\"M9 17v1a3 3 0 0 0 6 0v-1\" />\r\n              </svg>\r\n            </div>\r\n\r\n            <div className=\"notificationsWrapper\">\r\n              <h1>Notifications</h1>\r\n              {notifications ? (\r\n                notifications.map((x: any) => {\r\n                  return (\r\n                    <div className=\"notification\" key={x.id}>\r\n                      <p className=\"sender\">\r\n                        <span>from</span> {x.sender}\r\n                      </p>\r\n                      <p className=\"notificationMessage\">\r\n                        {x.message} <span> - {x.time}</span>\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className=\"notificationSpinner\"></div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <button className=\"navButtonLogged\" onClick={handleSignOut}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"44\"\r\n              height=\"44\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#6f32be\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n              <path d=\"M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2\" />\r\n              <path d=\"M20 12h-13l3 -3m0 6l-3 -3\" />\r\n            </svg>\r\n            <p>Sign Out</p>\r\n          </button>\r\n\r\n          <div className=\"hamburgerLogged\" onClick={handleMobile}>\r\n            <div className=\"lineLogged  line1\"> </div>\r\n            <div className=\"lineLogged line2\"> </div>\r\n            <div className=\"lineLogged  line3\"> </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mobileNavLogged\">\r\n        <h1 className=\"logoNavMobileLogged\">\r\n          <a href=\"/\">\r\n            JustTyp<span></span>\r\n          </a>\r\n        </h1>\r\n\r\n        <div className=\"navContentMobile\">\r\n          <ul>\r\n            {props.play ? (\r\n              <a href={props.path}>{props.name}</a>\r\n            ) : (\r\n              <Link to={props.path}>\r\n                <li>{props.name}</li>\r\n              </Link>\r\n            )}\r\n          </ul>\r\n\r\n          <Link to=\"/profile\">\r\n            <img\r\n              src={\r\n                user\r\n                  ? user.photoURL\r\n                  : \"https://firebasestorage.googleapis.com/v0/b/justtype-preview.appspot.com/o/profileimage.jpg?alt=media&token=ff56cecc-ffce-42c5-8079-bcc806e70348\"\r\n              }\r\n              className=\"profileImageMobile\"\r\n            />\r\n          </Link>\r\n\r\n          <button className=\"navButtonMobileLogged\" onClick={handleSignOut}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"44\"\r\n              height=\"44\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#6f32be\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n              <path d=\"M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2\" />\r\n              <path d=\"M20 12h-13l3 -3m0 6l-3 -3\" />\r\n            </svg>\r\n            <p>Sign Out</p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoggedNav;\r\n","import React from \"react\";\r\nimport \"../../style/css/main.css\";\r\nimport { Link } from \"react-router-dom\";\r\nconst NotLogged = () => {\r\n  return (\r\n    <div className=\"notLoggedIn\">\r\n      <p>You must be logged in to view this page</p>\r\n      <Link to=\"/sign-in\">\r\n        <button>Sign In</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotLogged;\r\n"],"sourceRoot":""}